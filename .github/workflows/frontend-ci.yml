name: Frontend CI

on:
  push:
    branches: [ main, develop, master ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.ts'
      - 'tailwind.config.ts'
      - 'tsconfig.json'
      - 'postcss.config.js'
      - 'components.json'
      - 'eslint.config.js'
      - 'index.html'
  pull_request:
    branches: [ main, develop, master ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.ts'
      - 'tailwind.config.ts'
      - 'tsconfig.json'
      - 'postcss.config.js'
      - 'components.json'
      - 'eslint.config.js'
      - 'index.html'

jobs:
  frontend-ci:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run ESLint
        run: npm run lint

      - name: TypeScript Type Check
        run: npx tsc --noEmit

      - name: Build Development
        run: npm run build:dev

      - name: Build Production
        run: npm run build

      - name: Upload Build Artifacts (Production)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-prod-${{ matrix.node-version }}
          path: dist/
          retention-days: 7

      - name: Preview Build (Smoke Test)
        run: |
          npm run preview &
          sleep 5
          curl -f http://localhost:4173 || exit 1
          pkill -f "vite preview"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: frontend-ci
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Security Audit
        run: npm audit --audit-level moderate

      - name: Check for Known Vulnerabilities
        run: npx audit-ci --moderate

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: frontend-ci
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build and Analyze Bundle
        run: |
          npm run build
          npx vite-bundle-analyzer dist --open-analyzer false

      - name: Check Bundle Size
        run: |
          BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          # You can add size limits here if needed

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [frontend-ci, security-audit, bundle-analysis]
    if: success()
    
    steps:
      - name: Success Notification
        run: |
          echo "‚úÖ Frontend CI Pipeline completed successfully!"
          echo "üì¶ Build artifacts uploaded"
          echo "üîí Security audit passed"
          echo "üìä Bundle analysis completed"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [frontend-ci, security-audit, bundle-analysis]
    if: failure()
    
    steps:
      - name: Failure Notification
        run: |
          echo "‚ùå Frontend CI Pipeline failed!"
          echo "Please check the logs above for details"
          exit 1
