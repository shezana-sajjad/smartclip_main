name: Backend CI

on:
  push:
    branches: [ main, develop, master ]
    paths:
      - 'backend/**'
      - 'supabase/**'
  pull_request:
    branches: [ main, develop, master ]
    paths:
      - 'backend/**'
      - 'supabase/**'

jobs:
  backend-ci:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: smartclips_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client ffmpeg

      - name: Install Python Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy bandit safety

      - name: Create Environment File
        working-directory: ./backend
        run: |
          cat > .env << EOF
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/smartclips_test
          REDIS_URL=redis://localhost:6379
          SECRET_KEY=test-secret-key-for-ci
          SUPABASE_URL=https://test.supabase.co
          SUPABASE_ANON_KEY=test-anon-key
          SUPABASE_SERVICE_KEY=test-service-key
          ENVIRONMENT=test
          EOF

      - name: Run Black (Code Formatting Check)
        working-directory: ./backend
        run: black --check --diff .

      - name: Run Flake8 (Linting)
        working-directory: ./backend
        run: flake8 .

      - name: Run MyPy (Type Checking)  
        working-directory: ./backend
        run: mypy . --ignore-missing-imports
        continue-on-error: true

      - name: Run Bandit (Security Linting)
        working-directory: ./backend
        run: bandit -r . -x tests/

      - name: Setup Database
        working-directory: ./backend
        run: |
          # Run database migrations if you have them
          # python manage.py migrate || echo "No migrations to run"
          echo "Database setup completed"

      - name: Run Tests with Coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/smartclips_test
          REDIS_URL: redis://localhost:6379
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing -v

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage-${{ matrix.python-version }}

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ matrix.python-version }}
          path: backend/htmlcov/
          retention-days: 7

      - name: Test Database Connection
        working-directory: ./backend
        run: |
          python -c "
          import psycopg2
          try:
              conn = psycopg2.connect('postgresql://postgres:postgres@localhost:5432/smartclips_test')
              print('✅ Database connection successful')
              conn.close()
          except Exception as e:
              print(f'❌ Database connection failed: {e}')
              exit(1)
          "

  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: backend-ci
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Security Tools
        run: |
          pip install safety bandit semgrep

      - name: Run Safety Check (Dependency Vulnerabilities)
        working-directory: ./backend
        run: safety check -r requirements.txt

      - name: Run Bandit (Security Issues)
        working-directory: ./backend
        run: bandit -r . -f json -o bandit-report.json

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: backend/bandit-report.json
          retention-days: 30

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: backend-ci
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        working-directory: ./backend
        run: |
          if [ -f Dockerfile ]; then
            docker build -t smartclips-backend:test .
            echo "✅ Docker image built successfully"
          else
            echo "⚠️ No Dockerfile found, skipping Docker build"
          fi

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [backend-ci, security-checks, docker-build]
    if: success()
    
    steps:
      - name: Success Notification
        run: |
          echo "✅ Backend CI Pipeline completed successfully!"
          echo "🐍 Python tests passed across all versions"
          echo "🔒 Security checks completed"
          echo "🐳 Docker build test completed"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [backend-ci, security-checks, docker-build]
    if: failure()
    
    steps:
      - name: Failure Notification
        run: |
          echo "❌ Backend CI Pipeline failed!"
          echo "Please check the logs above for details"
          exit 1
